stages:
  - test
  - build_and_delivery
  - deploy

image: python:3

unittest:
  stage: test
  before_script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install -U pip
    - export PYTHONPATH="$PYTHONPATH:$(pwd)"
    - pip install -r requirements.txt
  script:
    - pytest -s tests/unit_tests/
  only:
    - master

coverage:
  extends: unittest
  script:
    - pip install pytest-cov
    - pytest --cov=basicmlapp tests/unit_tests/
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/" # This parses the coverage log to display coverage into gitlab
  only:
    - master

# exemple d'un autre test possible
# check linting:
#   extends: test
#   script:
#     - make lint

build_and_delivery:
  stage: build_and_delivery
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  only:
    - master

# On va ici juste deployer en poussant une image dans docker registry
# mais on pourrait d√©ployer l'image sur n'importe quel environment
deploy_staging:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:staging" .
    - docker push "$CI_REGISTRY_IMAGE:staging"
  environment:
    name: staging
    url: https://example.com
  only:
    - master

deploy_prod:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:prod" .
    - docker push "$CI_REGISTRY_IMAGE:prod"
  environment:
    name: production
    url: https://example.com
  when: manual
  only:
    - master
